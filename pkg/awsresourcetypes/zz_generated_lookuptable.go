// This file was autogenerated. Do not edit it manually!
// Run 'make generate' from the base directory of this repo for changes.

package awsresourcetypes

var lookupTable = ServiceList{
	Services: map[string]Service{
		"accessanalyzer": {
			ServiceName: "AccessAnalyzer",
			Resources: map[string]string{
				"analyzer": "Analyzer",
			},
		},

		"acmpca": {
			ServiceName: "ACMPCA",
			Resources: map[string]string{
				"certificate":                    "Certificate",
				"certificateauthority":           "CertificateAuthority",
				"certificateauthorityactivation": "CertificateAuthorityActivation",
				"permission":                     "Permission",
			},
		},

		"amplify": {
			ServiceName: "Amplify",
			Resources: map[string]string{
				"app":    "App",
				"branch": "Branch",
				"domain": "Domain",
			},
		},

		"amplifyuibuilder": {
			ServiceName: "AmplifyUIBuilder",
			Resources: map[string]string{
				"component": "Component",
				"form":      "Form",
				"theme":     "Theme",
			},
		},

		"apigateway": {
			ServiceName: "ApiGateway",
			Resources: map[string]string{
				"account":              "Account",
				"apikey":               "ApiKey",
				"authorizer":           "Authorizer",
				"basepathmapping":      "BasePathMapping",
				"clientcertificate":    "ClientCertificate",
				"deployment":           "Deployment",
				"documentationpart":    "DocumentationPart",
				"documentationversion": "DocumentationVersion",
				"domainname":           "DomainName",
				"gatewayresponse":      "GatewayResponse",
				"method":               "Method",
				"model":                "Model",
				"requestvalidator":     "RequestValidator",
				"resource":             "Resource",
				"restapi":              "RestApi",
				"stage":                "Stage",
				"usageplan":            "UsagePlan",
				"usageplankey":         "UsagePlanKey",
				"vpclink":              "VpcLink",
			},
		},

		"apigatewayv2": {
			ServiceName: "ApiGatewayV2",
			Resources: map[string]string{
				"api":                 "Api",
				"apimapping":          "ApiMapping",
				"authorizer":          "Authorizer",
				"deployment":          "Deployment",
				"domainname":          "DomainName",
				"integrationresponse": "IntegrationResponse",
				"model":               "Model",
				"route":               "Route",
				"routeresponse":       "RouteResponse",
				"vpclink":             "VpcLink",
			},
		},

		"appconfig": {
			ServiceName: "AppConfig",
			Resources: map[string]string{
				"application":          "Application",
				"configurationprofile": "ConfigurationProfile",
				"extension":            "Extension",
				"extensionassociation": "ExtensionAssociation",
			},
		},

		"appflow": {
			ServiceName: "AppFlow",
			Resources: map[string]string{
				"connector":        "Connector",
				"connectorprofile": "ConnectorProfile",
				"flow":             "Flow",
			},
		},

		"appintegrations": {
			ServiceName: "AppIntegrations",
			Resources: map[string]string{
				"dataintegration":  "DataIntegration",
				"eventintegration": "EventIntegration",
			},
		},

		"applicationautoscaling": {
			ServiceName: "ApplicationAutoScaling",
			Resources: map[string]string{
				"scalabletarget": "ScalableTarget",
				"scalingpolicy":  "ScalingPolicy",
			},
		},

		"applicationinsights": {
			ServiceName: "ApplicationInsights",
			Resources: map[string]string{
				"application": "Application",
			},
		},

		"apprunner": {
			ServiceName: "AppRunner",
			Resources: map[string]string{
				"autoscalingconfiguration":   "AutoScalingConfiguration",
				"observabilityconfiguration": "ObservabilityConfiguration",
				"service":                    "Service",
				"vpcconnector":               "VpcConnector",
				"vpcingressconnection":       "VpcIngressConnection",
			},
		},

		"appstream": {
			ServiceName: "AppStream",
			Resources: map[string]string{
				"appblock":                          "AppBlock",
				"appblockbuilder":                   "AppBlockBuilder",
				"application":                       "Application",
				"applicationentitlementassociation": "ApplicationEntitlementAssociation",
				"applicationfleetassociation":       "ApplicationFleetAssociation",
				"directoryconfig":                   "DirectoryConfig",
				"entitlement":                       "Entitlement",
				"imagebuilder":                      "ImageBuilder",
			},
		},

		"appsync": {
			ServiceName: "AppSync",
			Resources: map[string]string{
				"domainname":               "DomainName",
				"domainnameapiassociation": "DomainNameApiAssociation",
				"functionconfiguration":    "FunctionConfiguration",
				"resolver":                 "Resolver",
				"sourceapiassociation":     "SourceApiAssociation",
			},
		},

		"aps": {
			ServiceName: "APS",
			Resources: map[string]string{
				"rulegroupsnamespace": "RuleGroupsNamespace",
				"workspace":           "Workspace",
			},
		},

		"athena": {
			ServiceName: "Athena",
			Resources: map[string]string{
				"capacityreservation": "CapacityReservation",
				"datacatalog":         "DataCatalog",
				"namedquery":          "NamedQuery",
				"preparedstatement":   "PreparedStatement",
				"workgroup":           "WorkGroup",
			},
		},

		"auditmanager": {
			ServiceName: "AuditManager",
			Resources: map[string]string{
				"assessment": "Assessment",
			},
		},

		"autoscaling": {
			ServiceName: "AutoScaling",
			Resources: map[string]string{
				"autoscalinggroup":    "AutoScalingGroup",
				"launchconfiguration": "LaunchConfiguration",
				"lifecyclehook":       "LifecycleHook",
				"scalingpolicy":       "ScalingPolicy",
				"scheduledaction":     "ScheduledAction",
				"warmpool":            "WarmPool",
			},
		},

		"backup": {
			ServiceName: "Backup",
			Resources: map[string]string{
				"backupplan":      "BackupPlan",
				"backupselection": "BackupSelection",
				"backupvault":     "BackupVault",
				"framework":       "Framework",
				"reportplan":      "ReportPlan",
			},
		},

		"backupgateway": {
			ServiceName: "BackupGateway",
			Resources: map[string]string{
				"hypervisor": "Hypervisor",
			},
		},

		"batch": {
			ServiceName: "Batch",
			Resources: map[string]string{
				"computeenvironment": "ComputeEnvironment",
				"jobqueue":           "JobQueue",
				"schedulingpolicy":   "SchedulingPolicy",
			},
		},

		"billingconductor": {
			ServiceName: "BillingConductor",
			Resources: map[string]string{
				"billinggroup":   "BillingGroup",
				"customlineitem": "CustomLineItem",
				"pricingplan":    "PricingPlan",
				"pricingrule":    "PricingRule",
			},
		},

		"budgets": {
			ServiceName: "Budgets",
			Resources: map[string]string{
				"budgetsaction": "BudgetsAction",
			},
		},

		"cassandra": {
			ServiceName: "Cassandra",
			Resources: map[string]string{
				"keyspace": "Keyspace",
				"table":    "Table",
			},
		},

		"ce": {
			ServiceName: "CE",
			Resources: map[string]string{
				"anomalymonitor":      "AnomalyMonitor",
				"anomalysubscription": "AnomalySubscription",
				"costcategory":        "CostCategory",
			},
		},

		"certificatemanager": {
			ServiceName: "CertificateManager",
			Resources: map[string]string{
				"account": "Account",
			},
		},

		"chatbot": {
			ServiceName: "Chatbot",
			Resources: map[string]string{
				"microsoftteamschannelconfiguration": "MicrosoftTeamsChannelConfiguration",
				"slackchannelconfiguration":          "SlackChannelConfiguration",
			},
		},

		"cleanrooms": {
			ServiceName: "CleanRooms",
			Resources: map[string]string{
				"analysistemplate":           "AnalysisTemplate",
				"collaboration":              "Collaboration",
				"configuredtable":            "ConfiguredTable",
				"configuredtableassociation": "ConfiguredTableAssociation",
				"membership":                 "Membership",
			},
		},

		"cloudformation": {
			ServiceName: "CloudFormation",
			Resources: map[string]string{
				"hookdefaultversion":     "HookDefaultVersion",
				"hooktypeconfig":         "HookTypeConfig",
				"hookversion":            "HookVersion",
				"moduledefaultversion":   "ModuleDefaultVersion",
				"moduleversion":          "ModuleVersion",
				"publictypeversion":      "PublicTypeVersion",
				"publisher":              "Publisher",
				"resourcedefaultversion": "ResourceDefaultVersion",
				"resourceversion":        "ResourceVersion",
				"stack":                  "Stack",
				"stackset":               "StackSet",
				"typeactivation":         "TypeActivation",
			},
		},

		"cloudfront": {
			ServiceName: "CloudFront",
			Resources: map[string]string{
				"cachepolicy":                    "CachePolicy",
				"cloudfrontoriginaccessidentity": "CloudFrontOriginAccessIdentity",
				"continuousdeploymentpolicy":     "ContinuousDeploymentPolicy",
				"distribution":                   "Distribution",
				"function":                       "Function",
				"keygroup":                       "KeyGroup",
				"monitoringsubscription":         "MonitoringSubscription",
				"originaccesscontrol":            "OriginAccessControl",
				"originrequestpolicy":            "OriginRequestPolicy",
				"publickey":                      "PublicKey",
				"realtimelogconfig":              "RealtimeLogConfig",
				"responseheaderspolicy":          "ResponseHeadersPolicy",
			},
		},

		"cloudtrail": {
			ServiceName: "CloudTrail",
			Resources: map[string]string{
				"channel":        "Channel",
				"eventdatastore": "EventDataStore",
				"resourcepolicy": "ResourcePolicy",
				"trail":          "Trail",
			},
		},

		"cloudwatch": {
			ServiceName: "CloudWatch",
			Resources: map[string]string{
				"alarm":          "Alarm",
				"compositealarm": "CompositeAlarm",
				"metricstream":   "MetricStream",
			},
		},

		"codeartifact": {
			ServiceName: "CodeArtifact",
			Resources: map[string]string{
				"domain":     "Domain",
				"repository": "Repository",
			},
		},

		"codedeploy": {
			ServiceName: "CodeDeploy",
			Resources: map[string]string{
				"application":      "Application",
				"deploymentconfig": "DeploymentConfig",
			},
		},

		"codeguruprofiler": {
			ServiceName: "CodeGuruProfiler",
			Resources: map[string]string{
				"profilinggroup": "ProfilingGroup",
			},
		},

		"codegurureviewer": {
			ServiceName: "CodeGuruReviewer",
			Resources: map[string]string{
				"repositoryassociation": "RepositoryAssociation",
			},
		},

		"codepipeline": {
			ServiceName: "CodePipeline",
			Resources: map[string]string{
				"customactiontype": "CustomActionType",
			},
		},

		"codestarconnections": {
			ServiceName: "CodeStarConnections",
			Resources: map[string]string{
				"connection": "Connection",
			},
		},

		"codestarnotifications": {
			ServiceName: "CodeStarNotifications",
			Resources: map[string]string{
				"notificationrule": "NotificationRule",
			},
		},

		"cognito": {
			ServiceName: "Cognito",
			Resources: map[string]string{
				"identitypoolprincipaltag":      "IdentityPoolPrincipalTag",
				"logdeliveryconfiguration":      "LogDeliveryConfiguration",
				"userpool":                      "UserPool",
				"userpoolclient":                "UserPoolClient",
				"userpoolgroup":                 "UserPoolGroup",
				"userpooluser":                  "UserPoolUser",
				"userpoolusertogroupattachment": "UserPoolUserToGroupAttachment",
			},
		},

		"comprehend": {
			ServiceName: "Comprehend",
			Resources: map[string]string{
				"documentclassifier": "DocumentClassifier",
				"flywheel":           "Flywheel",
			},
		},

		"config": {
			ServiceName: "Config",
			Resources: map[string]string{
				"aggregationauthorization":    "AggregationAuthorization",
				"configrule":                  "ConfigRule",
				"configurationaggregator":     "ConfigurationAggregator",
				"conformancepack":             "ConformancePack",
				"organizationconformancepack": "OrganizationConformancePack",
				"storedquery":                 "StoredQuery",
			},
		},

		"connect": {
			ServiceName: "Connect",
			Resources: map[string]string{
				"approvedorigin":           "ApprovedOrigin",
				"contactflow":              "ContactFlow",
				"contactflowmodule":        "ContactFlowModule",
				"evaluationform":           "EvaluationForm",
				"hoursofoperation":         "HoursOfOperation",
				"instance":                 "Instance",
				"instancestorageconfig":    "InstanceStorageConfig",
				"integrationassociation":   "IntegrationAssociation",
				"phonenumber":              "PhoneNumber",
				"prompt":                   "Prompt",
				"queue":                    "Queue",
				"quickconnect":             "QuickConnect",
				"routingprofile":           "RoutingProfile",
				"rule":                     "Rule",
				"securitykey":              "SecurityKey",
				"securityprofile":          "SecurityProfile",
				"tasktemplate":             "TaskTemplate",
				"trafficdistributiongroup": "TrafficDistributionGroup",
				"user":                     "User",
				"userhierarchygroup":       "UserHierarchyGroup",
				"view":                     "View",
				"viewversion":              "ViewVersion",
			},
		},

		"connectcampaigns": {
			ServiceName: "ConnectCampaigns",
			Resources: map[string]string{
				"campaign": "Campaign",
			},
		},

		"controltower": {
			ServiceName: "ControlTower",
			Resources: map[string]string{
				"enabledcontrol": "EnabledControl",
			},
		},

		"cur": {
			ServiceName: "CUR",
			Resources: map[string]string{
				"reportdefinition": "ReportDefinition",
			},
		},

		"customerprofiles": {
			ServiceName: "CustomerProfiles",
			Resources: map[string]string{
				"calculatedattributedefinition": "CalculatedAttributeDefinition",
				"domain":                        "Domain",
				"eventstream":                   "EventStream",
				"integration":                   "Integration",
				"objecttype":                    "ObjectType",
			},
		},

		"databrew": {
			ServiceName: "DataBrew",
			Resources: map[string]string{
				"dataset":  "Dataset",
				"job":      "Job",
				"project":  "Project",
				"recipe":   "Recipe",
				"ruleset":  "Ruleset",
				"schedule": "Schedule",
			},
		},

		"datapipeline": {
			ServiceName: "DataPipeline",
			Resources: map[string]string{
				"pipeline": "Pipeline",
			},
		},

		"datasync": {
			ServiceName: "DataSync",
			Resources: map[string]string{
				"agent":                 "Agent",
				"locationazureblob":     "LocationAzureBlob",
				"locationefs":           "LocationEFS",
				"locationfsxlustre":     "LocationFSxLustre",
				"locationfsxontap":      "LocationFSxONTAP",
				"locationfsxopenzfs":    "LocationFSxOpenZFS",
				"locationfsxwindows":    "LocationFSxWindows",
				"locationhdfs":          "LocationHDFS",
				"locationnfs":           "LocationNFS",
				"locationobjectstorage": "LocationObjectStorage",
				"locations3":            "LocationS3",
				"locationsmb":           "LocationSMB",
				"storagesystem":         "StorageSystem",
				"task":                  "Task",
			},
		},

		"detective": {
			ServiceName: "Detective",
			Resources: map[string]string{
				"graph":             "Graph",
				"memberinvitation":  "MemberInvitation",
				"organizationadmin": "OrganizationAdmin",
			},
		},

		"devicefarm": {
			ServiceName: "DeviceFarm",
			Resources: map[string]string{
				"devicepool":        "DevicePool",
				"instanceprofile":   "InstanceProfile",
				"networkprofile":    "NetworkProfile",
				"project":           "Project",
				"testgridproject":   "TestGridProject",
				"vpceconfiguration": "VPCEConfiguration",
			},
		},

		"devopsguru": {
			ServiceName: "DevOpsGuru",
			Resources: map[string]string{
				"loganomalydetectionintegration": "LogAnomalyDetectionIntegration",
				"notificationchannel":            "NotificationChannel",
				"resourcecollection":             "ResourceCollection",
			},
		},

		"directoryservice": {
			ServiceName: "DirectoryService",
			Resources: map[string]string{
				"simplead": "SimpleAD",
			},
		},

		"dms": {
			ServiceName: "DMS",
			Resources: map[string]string{
				"replicationconfig": "ReplicationConfig",
			},
		},

		"docdbelastic": {
			ServiceName: "DocDBElastic",
			Resources: map[string]string{
				"cluster": "Cluster",
			},
		},

		"dynamodb": {
			ServiceName: "DynamoDB",
			Resources: map[string]string{
				"globaltable": "GlobalTable",
				"table":       "Table",
			},
		},

		"ec2": {
			ServiceName: "EC2",
			Resources: map[string]string{
				"capacityreservation":                  "CapacityReservation",
				"capacityreservationfleet":             "CapacityReservationFleet",
				"carriergateway":                       "CarrierGateway",
				"customergateway":                      "CustomerGateway",
				"dhcpoptions":                          "DHCPOptions",
				"ec2fleet":                             "EC2Fleet",
				"egressonlyinternetgateway":            "EgressOnlyInternetGateway",
				"eip":                                  "EIP",
				"eipassociation":                       "EIPAssociation",
				"enclavecertificateiamroleassociation": "EnclaveCertificateIamRoleAssociation",
				"flowlog":                              "FlowLog",
				"gatewayroutetableassociation":         "GatewayRouteTableAssociation",
				"host":                                 "Host",
				"instanceconnectendpoint":              "InstanceConnectEndpoint",
				"internetgateway":                      "InternetGateway",
				"ipam":                                 "IPAM",
				"ipamallocation":                       "IPAMAllocation",
				"ipampool":                             "IPAMPool",
				"ipampoolcidr":                         "IPAMPoolCidr",
				"ipamresourcediscovery":                "IPAMResourceDiscovery",
				"ipamresourcediscoveryassociation":     "IPAMResourceDiscoveryAssociation",
				"ipamscope":                            "IPAMScope",
				"keypair":                              "KeyPair",
				"launchtemplate":                       "LaunchTemplate",
				"localgatewayroute":                    "LocalGatewayRoute",
				"localgatewayroutetable":               "LocalGatewayRouteTable",
				"localgatewayroutetablevirtualinterfacegroupassociation": "LocalGatewayRouteTableVirtualInterfaceGroupAssociation",
				"localgatewayroutetablevpcassociation":                   "LocalGatewayRouteTableVPCAssociation",
				"natgateway":                                             "NatGateway",
				"networkacl":                                             "NetworkAcl",
				"networkaclentry":                                        "NetworkAclEntry",
				"networkinsightsaccessscope":                             "NetworkInsightsAccessScope",
				"networkinsightsaccessscopeanalysis":                     "NetworkInsightsAccessScopeAnalysis",
				"networkinsightsanalysis":                                "NetworkInsightsAnalysis",
				"networkinsightspath":                                    "NetworkInsightsPath",
				"networkinterface":                                       "NetworkInterface",
				"networkinterfaceattachment":                             "NetworkInterfaceAttachment",
				"networkperformancemetricsubscription":                   "NetworkPerformanceMetricSubscription",
				"placementgroup":                                         "PlacementGroup",
				"prefixlist":                                             "PrefixList",
				"route":                                                  "Route",
				"routetable":                                             "RouteTable",
				"spotfleet":                                              "SpotFleet",
				"subnet":                                                 "Subnet",
				"subnetcidrblock":                                        "SubnetCidrBlock",
				"subnetnetworkaclassociation":                            "SubnetNetworkAclAssociation",
				"subnetroutetableassociation":                            "SubnetRouteTableAssociation",
				"transitgateway":                                         "TransitGateway",
				"transitgatewayattachment":                               "TransitGatewayAttachment",
				"transitgatewayconnect":                                  "TransitGatewayConnect",
				"transitgatewaymulticastdomain":                          "TransitGatewayMulticastDomain",
				"transitgatewaymulticastdomainassociation":               "TransitGatewayMulticastDomainAssociation",
				"transitgatewaymulticastgroupmember":                     "TransitGatewayMulticastGroupMember",
				"transitgatewaymulticastgroupsource":                     "TransitGatewayMulticastGroupSource",
				"transitgatewaypeeringattachment":                        "TransitGatewayPeeringAttachment",
				"transitgatewayroutetable":                               "TransitGatewayRouteTable",
				"transitgatewayvpcattachment":                            "TransitGatewayVpcAttachment",
				"verifiedaccessendpoint":                                 "VerifiedAccessEndpoint",
				"verifiedaccessgroup":                                    "VerifiedAccessGroup",
				"verifiedaccessinstance":                                 "VerifiedAccessInstance",
				"verifiedaccesstrustprovider":                            "VerifiedAccessTrustProvider",
				"volume":                                                 "Volume",
				"volumeattachment":                                       "VolumeAttachment",
				"vpc":                                                    "VPC",
				"vpcdhcpoptionsassociation":                              "VPCDHCPOptionsAssociation",
				"vpcendpoint":                                            "VPCEndpoint",
				"vpcendpointconnectionnotification":                      "VPCEndpointConnectionNotification",
				"vpcendpointservice":                                     "VPCEndpointService",
				"vpcendpointservicepermissions":                          "VPCEndpointServicePermissions",
				"vpcgatewayattachment":                                   "VPCGatewayAttachment",
				"vpcpeeringconnection":                                   "VPCPeeringConnection",
				"vpnconnection":                                          "VPNConnection",
				"vpnconnectionroute":                                     "VPNConnectionRoute",
				"vpngateway":                                             "VPNGateway",
			},
		},

		"ecr": {
			ServiceName: "ECR",
			Resources: map[string]string{
				"publicrepository":         "PublicRepository",
				"pullthroughcacherule":     "PullThroughCacheRule",
				"registrypolicy":           "RegistryPolicy",
				"replicationconfiguration": "ReplicationConfiguration",
				"repository":               "Repository",
			},
		},

		"ecs": {
			ServiceName: "ECS",
			Resources: map[string]string{
				"capacityprovider":                    "CapacityProvider",
				"cluster":                             "Cluster",
				"clustercapacityproviderassociations": "ClusterCapacityProviderAssociations",
				"primarytaskset":                      "PrimaryTaskSet",
				"service":                             "Service",
				"taskdefinition":                      "TaskDefinition",
				"taskset":                             "TaskSet",
			},
		},

		"efs": {
			ServiceName: "EFS",
			Resources: map[string]string{
				"accesspoint": "AccessPoint",
				"filesystem":  "FileSystem",
				"mounttarget": "MountTarget",
			},
		},

		"eks": {
			ServiceName: "EKS",
			Resources: map[string]string{
				"addon":                  "Addon",
				"cluster":                "Cluster",
				"fargateprofile":         "FargateProfile",
				"identityproviderconfig": "IdentityProviderConfig",
				"nodegroup":              "Nodegroup",
			},
		},

		"elasticache": {
			ServiceName: "ElastiCache",
			Resources: map[string]string{
				"globalreplicationgroup": "GlobalReplicationGroup",
				"subnetgroup":            "SubnetGroup",
				"user":                   "User",
				"usergroup":              "UserGroup",
			},
		},

		"elasticbeanstalk": {
			ServiceName: "ElasticBeanstalk",
			Resources: map[string]string{
				"application":           "Application",
				"applicationversion":    "ApplicationVersion",
				"configurationtemplate": "ConfigurationTemplate",
				"environment":           "Environment",
			},
		},

		"elasticloadbalancingv2": {
			ServiceName: "ElasticLoadBalancingV2",
			Resources: map[string]string{
				"listener":     "Listener",
				"listenerrule": "ListenerRule",
				"loadbalancer": "LoadBalancer",
				"targetgroup":  "TargetGroup",
			},
		},

		"emr": {
			ServiceName: "EMR",
			Resources: map[string]string{
				"securityconfiguration": "SecurityConfiguration",
				"step":                  "Step",
				"studio":                "Studio",
				"studiosessionmapping":  "StudioSessionMapping",
				"walworkspace":          "WALWorkspace",
			},
		},

		"emrcontainers": {
			ServiceName: "EMRContainers",
			Resources: map[string]string{
				"virtualcluster": "VirtualCluster",
			},
		},

		"emrserverless": {
			ServiceName: "EMRServerless",
			Resources: map[string]string{
				"application": "Application",
			},
		},

		"entityresolution": {
			ServiceName: "EntityResolution",
			Resources: map[string]string{
				"idmappingworkflow": "IdMappingWorkflow",
				"matchingworkflow":  "MatchingWorkflow",
				"schemamapping":     "SchemaMapping",
			},
		},

		"events": {
			ServiceName: "Events",
			Resources: map[string]string{
				"apidestination": "ApiDestination",
				"archive":        "Archive",
				"connection":     "Connection",
				"endpoint":       "Endpoint",
				"eventbus":       "EventBus",
				"rule":           "Rule",
			},
		},

		"eventschemas": {
			ServiceName: "EventSchemas",
			Resources: map[string]string{
				"registrypolicy": "RegistryPolicy",
			},
		},

		"evidently": {
			ServiceName: "Evidently",
			Resources: map[string]string{
				"experiment": "Experiment",
				"feature":    "Feature",
				"launch":     "Launch",
				"project":    "Project",
				"segment":    "Segment",
			},
		},

		"finspace": {
			ServiceName: "FinSpace",
			Resources: map[string]string{
				"environment": "Environment",
			},
		},

		"fis": {
			ServiceName: "FIS",
			Resources: map[string]string{
				"experimenttemplate": "ExperimentTemplate",
			},
		},

		"fms": {
			ServiceName: "FMS",
			Resources: map[string]string{
				"notificationchannel": "NotificationChannel",
				"policy":              "Policy",
				"resourceset":         "ResourceSet",
			},
		},

		"forecast": {
			ServiceName: "Forecast",
			Resources: map[string]string{
				"dataset":      "Dataset",
				"datasetgroup": "DatasetGroup",
			},
		},

		"frauddetector": {
			ServiceName: "FraudDetector",
			Resources: map[string]string{
				"detector":   "Detector",
				"entitytype": "EntityType",
				"eventtype":  "EventType",
				"label":      "Label",
				"list":       "List",
				"outcome":    "Outcome",
				"variable":   "Variable",
			},
		},

		"fsx": {
			ServiceName: "FSx",
			Resources: map[string]string{
				"datarepositoryassociation": "DataRepositoryAssociation",
			},
		},

		"gamelift": {
			ServiceName: "GameLift",
			Resources: map[string]string{
				"alias":           "Alias",
				"build":           "Build",
				"fleet":           "Fleet",
				"gameservergroup": "GameServerGroup",
				"location":        "Location",
			},
		},

		"globalaccelerator": {
			ServiceName: "GlobalAccelerator",
			Resources: map[string]string{
				"accelerator":   "Accelerator",
				"endpointgroup": "EndpointGroup",
				"listener":      "Listener",
			},
		},

		"glue": {
			ServiceName: "Glue",
			Resources: map[string]string{
				"registry":              "Registry",
				"schema":                "Schema",
				"schemaversion":         "SchemaVersion",
				"schemaversionmetadata": "SchemaVersionMetadata",
			},
		},

		"grafana": {
			ServiceName: "Grafana",
			Resources: map[string]string{
				"workspace": "Workspace",
			},
		},

		"greengrassv2": {
			ServiceName: "GreengrassV2",
			Resources: map[string]string{
				"componentversion": "ComponentVersion",
				"deployment":       "Deployment",
			},
		},

		"groundstation": {
			ServiceName: "GroundStation",
			Resources: map[string]string{
				"config":                "Config",
				"dataflowendpointgroup": "DataflowEndpointGroup",
				"missionprofile":        "MissionProfile",
			},
		},

		"guardduty": {
			ServiceName: "GuardDuty",
			Resources: map[string]string{
				"detector": "Detector",
			},
		},

		"healthimaging": {
			ServiceName: "HealthImaging",
			Resources: map[string]string{
				"datastore": "Datastore",
			},
		},

		"healthlake": {
			ServiceName: "HealthLake",
			Resources: map[string]string{
				"fhirdatastore": "FHIRDatastore",
			},
		},

		"iam": {
			ServiceName: "IAM",
			Resources: map[string]string{
				"group":             "Group",
				"grouppolicy":       "GroupPolicy",
				"instanceprofile":   "InstanceProfile",
				"managedpolicy":     "ManagedPolicy",
				"oidcprovider":      "OIDCProvider",
				"policy":            "Policy",
				"role":              "Role",
				"rolepolicy":        "RolePolicy",
				"samlprovider":      "SAMLProvider",
				"servercertificate": "ServerCertificate",
				"servicelinkedrole": "ServiceLinkedRole",
				"user":              "User",
				"userpolicy":        "UserPolicy",
				"virtualmfadevice":  "VirtualMFADevice",
			},
		},

		"identitystore": {
			ServiceName: "IdentityStore",
			Resources: map[string]string{
				"group":           "Group",
				"groupmembership": "GroupMembership",
			},
		},

		"imagebuilder": {
			ServiceName: "ImageBuilder",
			Resources: map[string]string{
				"component":                   "Component",
				"containerrecipe":             "ContainerRecipe",
				"distributionconfiguration":   "DistributionConfiguration",
				"image":                       "Image",
				"imagepipeline":               "ImagePipeline",
				"imagerecipe":                 "ImageRecipe",
				"infrastructureconfiguration": "InfrastructureConfiguration",
			},
		},

		"inspector": {
			ServiceName: "Inspector",
			Resources: map[string]string{
				"assessmenttarget":   "AssessmentTarget",
				"assessmenttemplate": "AssessmentTemplate",
				"resourcegroup":      "ResourceGroup",
			},
		},

		"inspectorv2": {
			ServiceName: "InspectorV2",
			Resources: map[string]string{
				"filter": "Filter",
			},
		},

		"internetmonitor": {
			ServiceName: "InternetMonitor",
			Resources: map[string]string{
				"monitor": "Monitor",
			},
		},

		"iot": {
			ServiceName: "IoT",
			Resources: map[string]string{
				"accountauditconfiguration": "AccountAuditConfiguration",
				"authorizer":                "Authorizer",
				"billinggroup":              "BillingGroup",
				"cacertificate":             "CACertificate",
				"certificate":               "Certificate",
				"custommetric":              "CustomMetric",
				"dimension":                 "Dimension",
				"domainconfiguration":       "DomainConfiguration",
				"fleetmetric":               "FleetMetric",
				"jobtemplate":               "JobTemplate",
				"logging":                   "Logging",
				"mitigationaction":          "MitigationAction",
				"policy":                    "Policy",
				"provisioningtemplate":      "ProvisioningTemplate",
				"resourcespecificlogging":   "ResourceSpecificLogging",
				"rolealias":                 "RoleAlias",
				"scheduledaudit":            "ScheduledAudit",
				"securityprofile":           "SecurityProfile",
				"softwarepackage":           "SoftwarePackage",
				"softwarepackageversion":    "SoftwarePackageVersion",
				"thing":                     "Thing",
				"thinggroup":                "ThingGroup",
				"thingtype":                 "ThingType",
				"topicrule":                 "TopicRule",
				"topicruledestination":      "TopicRuleDestination",
			},
		},

		"iotanalytics": {
			ServiceName: "IoTAnalytics",
			Resources: map[string]string{
				"channel":   "Channel",
				"dataset":   "Dataset",
				"datastore": "Datastore",
				"pipeline":  "Pipeline",
			},
		},

		"iotcoredeviceadvisor": {
			ServiceName: "IoTCoreDeviceAdvisor",
			Resources: map[string]string{
				"suitedefinition": "SuiteDefinition",
			},
		},

		"iotevents": {
			ServiceName: "IoTEvents",
			Resources: map[string]string{
				"alarmmodel":    "AlarmModel",
				"detectormodel": "DetectorModel",
				"input":         "Input",
			},
		},

		"iotfleethub": {
			ServiceName: "IoTFleetHub",
			Resources: map[string]string{
				"application": "Application",
			},
		},

		"iotfleetwise": {
			ServiceName: "IoTFleetWise",
			Resources: map[string]string{
				"campaign":        "Campaign",
				"decodermanifest": "DecoderManifest",
				"fleet":           "Fleet",
				"modelmanifest":   "ModelManifest",
				"signalcatalog":   "SignalCatalog",
				"vehicle":         "Vehicle",
			},
		},

		"iotsitewise": {
			ServiceName: "IoTSiteWise",
			Resources: map[string]string{
				"accesspolicy": "AccessPolicy",
				"asset":        "Asset",
				"assetmodel":   "AssetModel",
				"dashboard":    "Dashboard",
				"gateway":      "Gateway",
				"portal":       "Portal",
				"project":      "Project",
			},
		},

		"iottwinmaker": {
			ServiceName: "IoTTwinMaker",
			Resources: map[string]string{
				"componenttype": "ComponentType",
				"entity":        "Entity",
				"scene":         "Scene",
				"syncjob":       "SyncJob",
				"workspace":     "Workspace",
			},
		},

		"iotwireless": {
			ServiceName: "IoTWireless",
			Resources: map[string]string{
				"destination":                  "Destination",
				"deviceprofile":                "DeviceProfile",
				"fuotatask":                    "FuotaTask",
				"multicastgroup":               "MulticastGroup",
				"networkanalyzerconfiguration": "NetworkAnalyzerConfiguration",
				"partneraccount":               "PartnerAccount",
				"serviceprofile":               "ServiceProfile",
				"taskdefinition":               "TaskDefinition",
				"wirelessdevice":               "WirelessDevice",
				"wirelessdeviceimporttask":     "WirelessDeviceImportTask",
				"wirelessgateway":              "WirelessGateway",
			},
		},

		"ivs": {
			ServiceName: "IVS",
			Resources: map[string]string{
				"channel":                "Channel",
				"playbackkeypair":        "PlaybackKeyPair",
				"recordingconfiguration": "RecordingConfiguration",
				"streamkey":              "StreamKey",
			},
		},

		"ivschat": {
			ServiceName: "IVSChat",
			Resources: map[string]string{
				"loggingconfiguration": "LoggingConfiguration",
				"room":                 "Room",
			},
		},

		"kafkaconnect": {
			ServiceName: "KafkaConnect",
			Resources: map[string]string{
				"connector": "Connector",
			},
		},

		"kendra": {
			ServiceName: "Kendra",
			Resources: map[string]string{
				"datasource": "DataSource",
				"faq":        "Faq",
				"index":      "Index",
			},
		},

		"kendraranking": {
			ServiceName: "KendraRanking",
			Resources: map[string]string{
				"executionplan": "ExecutionPlan",
			},
		},

		"kinesis": {
			ServiceName: "Kinesis",
			Resources: map[string]string{
				"stream": "Stream",
			},
		},

		"kinesisanalyticsv2": {
			ServiceName: "KinesisAnalyticsV2",
			Resources: map[string]string{
				"application": "Application",
			},
		},

		"kinesisfirehose": {
			ServiceName: "KinesisFirehose",
			Resources: map[string]string{
				"deliverystream": "DeliveryStream",
			},
		},

		"kinesisvideo": {
			ServiceName: "KinesisVideo",
			Resources: map[string]string{
				"signalingchannel": "SignalingChannel",
				"stream":           "Stream",
			},
		},

		"kms": {
			ServiceName: "KMS",
			Resources: map[string]string{
				"alias":      "Alias",
				"key":        "Key",
				"replicakey": "ReplicaKey",
			},
		},

		"lakeformation": {
			ServiceName: "LakeFormation",
			Resources: map[string]string{
				"datacellsfilter":      "DataCellsFilter",
				"principalpermissions": "PrincipalPermissions",
				"tag":                  "Tag",
				"tagassociation":       "TagAssociation",
			},
		},

		"lambda": {
			ServiceName: "Lambda",
			Resources: map[string]string{
				"codesigningconfig":      "CodeSigningConfig",
				"eventsourcemapping":     "EventSourceMapping",
				"function":               "Function",
				"layerversion":           "LayerVersion",
				"layerversionpermission": "LayerVersionPermission",
				"permission":             "Permission",
				"url":                    "Url",
				"version":                "Version",
			},
		},

		"lex": {
			ServiceName: "Lex",
			Resources: map[string]string{
				"bot":            "Bot",
				"botalias":       "BotAlias",
				"botversion":     "BotVersion",
				"resourcepolicy": "ResourcePolicy",
			},
		},

		"licensemanager": {
			ServiceName: "LicenseManager",
			Resources: map[string]string{
				"grant":   "Grant",
				"license": "License",
			},
		},

		"lightsail": {
			ServiceName: "Lightsail",
			Resources: map[string]string{
				"alarm":                      "Alarm",
				"bucket":                     "Bucket",
				"certificate":                "Certificate",
				"container":                  "Container",
				"database":                   "Database",
				"disk":                       "Disk",
				"distribution":               "Distribution",
				"instance":                   "Instance",
				"loadbalancer":               "LoadBalancer",
				"loadbalancertlscertificate": "LoadBalancerTlsCertificate",
				"staticip":                   "StaticIp",
			},
		},

		"location": {
			ServiceName: "Location",
			Resources: map[string]string{
				"geofencecollection": "GeofenceCollection",
				"map":                "Map",
				"placeindex":         "PlaceIndex",
				"routecalculator":    "RouteCalculator",
				"tracker":            "Tracker",
				"trackerconsumer":    "TrackerConsumer",
			},
		},

		"logs": {
			ServiceName: "Logs",
			Resources: map[string]string{
				"accountpolicy":      "AccountPolicy",
				"destination":        "Destination",
				"loggroup":           "LogGroup",
				"logstream":          "LogStream",
				"metricfilter":       "MetricFilter",
				"querydefinition":    "QueryDefinition",
				"resourcepolicy":     "ResourcePolicy",
				"subscriptionfilter": "SubscriptionFilter",
			},
		},

		"lookoutequipment": {
			ServiceName: "LookoutEquipment",
			Resources: map[string]string{
				"inferencescheduler": "InferenceScheduler",
			},
		},

		"lookoutmetrics": {
			ServiceName: "LookoutMetrics",
			Resources: map[string]string{
				"alert":           "Alert",
				"anomalydetector": "AnomalyDetector",
			},
		},

		"lookoutvision": {
			ServiceName: "LookoutVision",
			Resources: map[string]string{
				"project": "Project",
			},
		},

		"m2": {
			ServiceName: "M2",
			Resources: map[string]string{
				"application": "Application",
				"environment": "Environment",
			},
		},

		"macie": {
			ServiceName: "Macie",
			Resources: map[string]string{
				"allowlist":            "AllowList",
				"customdataidentifier": "CustomDataIdentifier",
				"findingsfilter":       "FindingsFilter",
				"session":              "Session",
			},
		},

		"managedblockchain": {
			ServiceName: "ManagedBlockchain",
			Resources: map[string]string{
				"accessor": "Accessor",
			},
		},

		"mediaconnect": {
			ServiceName: "MediaConnect",
			Resources: map[string]string{
				"bridge":           "Bridge",
				"bridgeoutput":     "BridgeOutput",
				"bridgesource":     "BridgeSource",
				"flow":             "Flow",
				"flowentitlement":  "FlowEntitlement",
				"flowoutput":       "FlowOutput",
				"flowsource":       "FlowSource",
				"flowvpcinterface": "FlowVpcInterface",
				"gateway":          "Gateway",
			},
		},

		"medialive": {
			ServiceName: "MediaLive",
			Resources: map[string]string{
				"multiplex":        "Multiplex",
				"multiplexprogram": "Multiplexprogram",
			},
		},

		"mediapackage": {
			ServiceName: "MediaPackage",
			Resources: map[string]string{
				"asset":                  "Asset",
				"channel":                "Channel",
				"originendpoint":         "OriginEndpoint",
				"packagingconfiguration": "PackagingConfiguration",
				"packaginggroup":         "PackagingGroup",
			},
		},

		"mediapackagev2": {
			ServiceName: "MediaPackageV2",
			Resources: map[string]string{
				"channel":              "Channel",
				"channelgroup":         "ChannelGroup",
				"channelpolicy":        "ChannelPolicy",
				"originendpoint":       "OriginEndpoint",
				"originendpointpolicy": "OriginEndpointPolicy",
			},
		},

		"mediatailor": {
			ServiceName: "MediaTailor",
			Resources: map[string]string{
				"channel":               "Channel",
				"channelpolicy":         "ChannelPolicy",
				"livesource":            "LiveSource",
				"playbackconfiguration": "PlaybackConfiguration",
				"sourcelocation":        "SourceLocation",
				"vodsource":             "VodSource",
			},
		},

		"memorydb": {
			ServiceName: "MemoryDB",
			Resources: map[string]string{
				"acl":            "ACL",
				"cluster":        "Cluster",
				"parametergroup": "ParameterGroup",
				"subnetgroup":    "SubnetGroup",
				"user":           "User",
			},
		},

		"msk": {
			ServiceName: "MSK",
			Resources: map[string]string{
				"batchscramsecret":  "BatchScramSecret",
				"cluster":           "Cluster",
				"clusterpolicy":     "ClusterPolicy",
				"configuration":     "Configuration",
				"replicator":        "Replicator",
				"serverlesscluster": "ServerlessCluster",
				"vpcconnection":     "VpcConnection",
			},
		},

		"mwaa": {
			ServiceName: "MWAA",
			Resources: map[string]string{
				"environment": "Environment",
			},
		},

		"neptune": {
			ServiceName: "Neptune",
			Resources: map[string]string{
				"dbcluster": "DBCluster",
			},
		},

		"networkfirewall": {
			ServiceName: "NetworkFirewall",
			Resources: map[string]string{
				"firewall":             "Firewall",
				"firewallpolicy":       "FirewallPolicy",
				"loggingconfiguration": "LoggingConfiguration",
				"rulegroup":            "RuleGroup",
			},
		},

		"networkmanager": {
			ServiceName: "NetworkManager",
			Resources: map[string]string{
				"connectattachment":                  "ConnectAttachment",
				"connectpeer":                        "ConnectPeer",
				"corenetwork":                        "CoreNetwork",
				"customergatewayassociation":         "CustomerGatewayAssociation",
				"device":                             "Device",
				"globalnetwork":                      "GlobalNetwork",
				"link":                               "Link",
				"linkassociation":                    "LinkAssociation",
				"site":                               "Site",
				"sitetositevpnattachment":            "SiteToSiteVpnAttachment",
				"transitgatewaypeering":              "TransitGatewayPeering",
				"transitgatewayregistration":         "TransitGatewayRegistration",
				"transitgatewayroutetableattachment": "TransitGatewayRouteTableAttachment",
				"vpcattachment":                      "VpcAttachment",
			},
		},

		"nimblestudio": {
			ServiceName: "NimbleStudio",
			Resources: map[string]string{
				"launchprofile":   "LaunchProfile",
				"streamingimage":  "StreamingImage",
				"studio":          "Studio",
				"studiocomponent": "StudioComponent",
			},
		},

		"oam": {
			ServiceName: "Oam",
			Resources: map[string]string{
				"link": "Link",
				"sink": "Sink",
			},
		},

		"omics": {
			ServiceName: "Omics",
			Resources: map[string]string{
				"annotationstore": "AnnotationStore",
				"referencestore":  "ReferenceStore",
				"rungroup":        "RunGroup",
				"sequencestore":   "SequenceStore",
				"variantstore":    "VariantStore",
				"workflow":        "Workflow",
			},
		},

		"opensearchserverless": {
			ServiceName: "OpenSearchServerless",
			Resources: map[string]string{
				"accesspolicy":   "AccessPolicy",
				"collection":     "Collection",
				"securityconfig": "SecurityConfig",
				"securitypolicy": "SecurityPolicy",
				"vpcendpoint":    "VpcEndpoint",
			},
		},

		"opensearchservice": {
			ServiceName: "OpenSearchService",
			Resources: map[string]string{
				"domain": "Domain",
			},
		},

		"opsworkscm": {
			ServiceName: "OpsWorksCM",
			Resources: map[string]string{
				"server": "Server",
			},
		},

		"organizations": {
			ServiceName: "Organizations",
			Resources: map[string]string{
				"account":            "Account",
				"organization":       "Organization",
				"organizationalunit": "OrganizationalUnit",
				"policy":             "Policy",
				"resourcepolicy":     "ResourcePolicy",
			},
		},

		"osis": {
			ServiceName: "OSIS",
			Resources: map[string]string{
				"pipeline": "Pipeline",
			},
		},

		"panorama": {
			ServiceName: "Panorama",
			Resources: map[string]string{
				"applicationinstance": "ApplicationInstance",
				"package":             "Package",
				"packageversion":      "PackageVersion",
			},
		},

		"pcaconnectorad": {
			ServiceName: "PCAConnectorAD",
			Resources: map[string]string{
				"connector":                       "Connector",
				"directoryregistration":           "DirectoryRegistration",
				"serviceprincipalname":            "ServicePrincipalName",
				"template":                        "Template",
				"templategroupaccesscontrolentry": "TemplateGroupAccessControlEntry",
			},
		},

		"personalize": {
			ServiceName: "Personalize",
			Resources: map[string]string{
				"dataset":      "Dataset",
				"datasetgroup": "DatasetGroup",
				"schema":       "Schema",
				"solution":     "Solution",
			},
		},

		"pinpoint": {
			ServiceName: "Pinpoint",
			Resources: map[string]string{
				"inapptemplate": "InAppTemplate",
			},
		},

		"pipes": {
			ServiceName: "Pipes",
			Resources: map[string]string{
				"pipe": "Pipe",
			},
		},

		"proton": {
			ServiceName: "Proton",
			Resources: map[string]string{
				"environmentaccountconnection": "EnvironmentAccountConnection",
				"environmenttemplate":          "EnvironmentTemplate",
				"servicetemplate":              "ServiceTemplate",
			},
		},

		"qldb": {
			ServiceName: "QLDB",
			Resources: map[string]string{
				"stream": "Stream",
			},
		},

		"quicksight": {
			ServiceName: "QuickSight",
			Resources: map[string]string{
				"analysis":        "Analysis",
				"dashboard":       "Dashboard",
				"dataset":         "DataSet",
				"datasource":      "DataSource",
				"refreshschedule": "RefreshSchedule",
				"template":        "Template",
				"theme":           "Theme",
				"topic":           "Topic",
				"vpcconnection":   "VPCConnection",
			},
		},

		"ram": {
			ServiceName: "RAM",
			Resources: map[string]string{
				"permission": "Permission",
			},
		},

		"rds": {
			ServiceName: "RDS",
			Resources: map[string]string{
				"cluster":                 "DBCluster",
				"customdbengineversion":   "CustomDBEngineVersion",
				"db":                      "DBInstance",
				"dbcluster":               "DBCluster",
				"dbclusterparametergroup": "DBClusterParameterGroup",
				"dbinstance":              "DBInstance",
				"dbparametergroup":        "DBParameterGroup",
				"dbproxy":                 "DBProxy",
				"dbproxyendpoint":         "DBProxyEndpoint",
				"dbproxytargetgroup":      "DBProxyTargetGroup",
				"dbsubnetgroup":           "DBSubnetGroup",
				"eventsubscription":       "EventSubscription",
				"globalcluster":           "GlobalCluster",
				"optiongroup":             "OptionGroup",
			},
		},

		"redshift": {
			ServiceName: "Redshift",
			Resources: map[string]string{
				"cluster":               "Cluster",
				"clusterparametergroup": "ClusterParameterGroup",
				"clustersubnetgroup":    "ClusterSubnetGroup",
				"endpointaccess":        "EndpointAccess",
				"endpointauthorization": "EndpointAuthorization",
				"eventsubscription":     "EventSubscription",
				"scheduledaction":       "ScheduledAction",
			},
		},

		"redshiftserverless": {
			ServiceName: "RedshiftServerless",
			Resources: map[string]string{
				"namespace": "Namespace",
				"workgroup": "Workgroup",
			},
		},

		"refactorspaces": {
			ServiceName: "RefactorSpaces",
			Resources: map[string]string{
				"application": "Application",
				"environment": "Environment",
				"route":       "Route",
				"service":     "Service",
			},
		},

		"rekognition": {
			ServiceName: "Rekognition",
			Resources: map[string]string{
				"collection":      "Collection",
				"project":         "Project",
				"streamprocessor": "StreamProcessor",
			},
		},

		"resiliencehub": {
			ServiceName: "ResilienceHub",
			Resources: map[string]string{
				"app":              "App",
				"resiliencypolicy": "ResiliencyPolicy",
			},
		},

		"resourceexplorer2": {
			ServiceName: "ResourceExplorer2",
			Resources: map[string]string{
				"defaultviewassociation": "DefaultViewAssociation",
				"index":                  "Index",
				"view":                   "View",
			},
		},

		"resourcegroups": {
			ServiceName: "ResourceGroups",
			Resources: map[string]string{
				"group": "Group",
			},
		},

		"robomaker": {
			ServiceName: "RoboMaker",
			Resources: map[string]string{
				"fleet":                        "Fleet",
				"robot":                        "Robot",
				"robotapplication":             "RobotApplication",
				"robotapplicationversion":      "RobotApplicationVersion",
				"simulationapplication":        "SimulationApplication",
				"simulationapplicationversion": "SimulationApplicationVersion",
			},
		},

		"rolesanywhere": {
			ServiceName: "RolesAnywhere",
			Resources: map[string]string{
				"crl":         "CRL",
				"profile":     "Profile",
				"trustanchor": "TrustAnchor",
			},
		},

		"route53": {
			ServiceName: "Route53",
			Resources: map[string]string{
				"cidrcollection": "CidrCollection",
				"dnssec":         "DNSSEC",
				"healthcheck":    "HealthCheck",
				"hostedzone":     "HostedZone",
				"keysigningkey":  "KeySigningKey",
			},
		},

		"route53recoverycontrol": {
			ServiceName: "Route53RecoveryControl",
			Resources: map[string]string{
				"cluster":        "Cluster",
				"controlpanel":   "ControlPanel",
				"routingcontrol": "RoutingControl",
				"safetyrule":     "SafetyRule",
			},
		},

		"route53recoveryreadiness": {
			ServiceName: "Route53RecoveryReadiness",
			Resources: map[string]string{
				"cell":           "Cell",
				"readinesscheck": "ReadinessCheck",
				"recoverygroup":  "RecoveryGroup",
				"resourceset":    "ResourceSet",
			},
		},

		"route53resolver": {
			ServiceName: "Route53Resolver",
			Resources: map[string]string{
				"firewalldomainlist":                    "FirewallDomainList",
				"firewallrulegroup":                     "FirewallRuleGroup",
				"firewallrulegroupassociation":          "FirewallRuleGroupAssociation",
				"outpostresolver":                       "OutpostResolver",
				"resolverconfig":                        "ResolverConfig",
				"resolverdnssecconfig":                  "ResolverDNSSECConfig",
				"resolverqueryloggingconfig":            "ResolverQueryLoggingConfig",
				"resolverqueryloggingconfigassociation": "ResolverQueryLoggingConfigAssociation",
				"resolverrule":                          "ResolverRule",
				"resolverruleassociation":               "ResolverRuleAssociation",
			},
		},

		"rum": {
			ServiceName: "RUM",
			Resources: map[string]string{
				"appmonitor": "AppMonitor",
			},
		},

		"s3": {
			ServiceName: "S3",
			Resources: map[string]string{
				"accesspoint":                  "AccessPoint",
				"bucket":                       "Bucket",
				"bucketpolicy":                 "BucketPolicy",
				"multiregionaccesspoint":       "MultiRegionAccessPoint",
				"multiregionaccesspointpolicy": "MultiRegionAccessPointPolicy",
				"storagelens":                  "StorageLens",
				"storagelensgroup":             "StorageLensGroup",
			},
		},

		"s3objectlambda": {
			ServiceName: "S3ObjectLambda",
			Resources: map[string]string{
				"accesspoint":       "AccessPoint",
				"accesspointpolicy": "AccessPointPolicy",
			},
		},

		"s3outposts": {
			ServiceName: "S3Outposts",
			Resources: map[string]string{
				"accesspoint":  "AccessPoint",
				"bucket":       "Bucket",
				"bucketpolicy": "BucketPolicy",
				"endpoint":     "Endpoint",
			},
		},

		"sagemaker": {
			ServiceName: "SageMaker",
			Resources: map[string]string{
				"app":                              "App",
				"appimageconfig":                   "AppImageConfig",
				"dataqualityjobdefinition":         "DataQualityJobDefinition",
				"device":                           "Device",
				"devicefleet":                      "DeviceFleet",
				"domain":                           "Domain",
				"featuregroup":                     "FeatureGroup",
				"image":                            "Image",
				"imageversion":                     "ImageVersion",
				"inferenceexperiment":              "InferenceExperiment",
				"modelbiasjobdefinition":           "ModelBiasJobDefinition",
				"modelcard":                        "ModelCard",
				"modelexplainabilityjobdefinition": "ModelExplainabilityJobDefinition",
				"modelpackage":                     "ModelPackage",
				"modelpackagegroup":                "ModelPackageGroup",
				"modelqualityjobdefinition":        "ModelQualityJobDefinition",
				"monitoringschedule":               "MonitoringSchedule",
				"pipeline":                         "Pipeline",
				"project":                          "Project",
				"space":                            "Space",
				"userprofile":                      "UserProfile",
			},
		},

		"scheduler": {
			ServiceName: "Scheduler",
			Resources: map[string]string{
				"schedule":      "Schedule",
				"schedulegroup": "ScheduleGroup",
			},
		},

		"secretsmanager": {
			ServiceName: "SecretsManager",
			Resources: map[string]string{
				"secret": "Secret",
			},
		},

		"securityhub": {
			ServiceName: "SecurityHub",
			Resources: map[string]string{
				"automationrule": "AutomationRule",
				"standard":       "Standard",
			},
		},

		"servicecatalog": {
			ServiceName: "ServiceCatalog",
			Resources: map[string]string{
				"cloudformationprovisionedproduct": "CloudFormationProvisionedProduct",
				"serviceaction":                    "ServiceAction",
				"serviceactionassociation":         "ServiceActionAssociation",
			},
		},

		"servicecatalogappregistry": {
			ServiceName: "ServiceCatalogAppRegistry",
			Resources: map[string]string{
				"application":               "Application",
				"attributegroup":            "AttributeGroup",
				"attributegroupassociation": "AttributeGroupAssociation",
				"resourceassociation":       "ResourceAssociation",
			},
		},

		"ses": {
			ServiceName: "SES",
			Resources: map[string]string{
				"configurationset":                 "ConfigurationSet",
				"configurationseteventdestination": "ConfigurationSetEventDestination",
				"contactlist":                      "ContactList",
				"dedicatedippool":                  "DedicatedIpPool",
				"emailidentity":                    "EmailIdentity",
				"template":                         "Template",
				"vdmattributes":                    "VdmAttributes",
			},
		},

		"shield": {
			ServiceName: "Shield",
			Resources: map[string]string{
				"drtaccess":           "DRTAccess",
				"proactiveengagement": "ProactiveEngagement",
				"protection":          "Protection",
				"protectiongroup":     "ProtectionGroup",
			},
		},

		"signer": {
			ServiceName: "Signer",
			Resources: map[string]string{
				"profilepermission": "ProfilePermission",
				"signingprofile":    "SigningProfile",
			},
		},

		"simspaceweaver": {
			ServiceName: "SimSpaceWeaver",
			Resources: map[string]string{
				"simulation": "Simulation",
			},
		},

		"sns": {
			ServiceName: "SNS",
			Resources: map[string]string{
				"topic":             "Topic",
				"topicinlinepolicy": "TopicInlinePolicy",
				"topicpolicy":       "TopicPolicy",
			},
		},

		"sqs": {
			ServiceName: "SQS",
			Resources: map[string]string{
				"queue":             "Queue",
				"queueinlinepolicy": "QueueInlinePolicy",
				"queuepolicy":       "QueuePolicy",
			},
		},

		"ssm": {
			ServiceName: "SSM",
			Resources: map[string]string{
				"association":      "Association",
				"document":         "Document",
				"parameter":        "Parameter",
				"resourcedatasync": "ResourceDataSync",
				"resourcepolicy":   "ResourcePolicy",
			},
		},

		"ssmcontacts": {
			ServiceName: "SSMContacts",
			Resources: map[string]string{
				"contact":        "Contact",
				"contactchannel": "ContactChannel",
				"plan":           "Plan",
				"rotation":       "Rotation",
			},
		},

		"ssmincidents": {
			ServiceName: "SSMIncidents",
			Resources: map[string]string{
				"replicationset": "ReplicationSet",
				"responseplan":   "ResponsePlan",
			},
		},

		"sso": {
			ServiceName: "SSO",
			Resources: map[string]string{
				"assignment": "Assignment",
				"instanceaccesscontrolattributeconfiguration": "InstanceAccessControlAttributeConfiguration",
				"permissionset": "PermissionSet",
			},
		},

		"stepfunctions": {
			ServiceName: "StepFunctions",
			Resources: map[string]string{
				"activity":            "Activity",
				"statemachine":        "StateMachine",
				"statemachinealias":   "StateMachineAlias",
				"statemachineversion": "StateMachineVersion",
			},
		},

		"supportapp": {
			ServiceName: "SupportApp",
			Resources: map[string]string{
				"accountalias":                "AccountAlias",
				"slackchannelconfiguration":   "SlackChannelConfiguration",
				"slackworkspaceconfiguration": "SlackWorkspaceConfiguration",
			},
		},

		"synthetics": {
			ServiceName: "Synthetics",
			Resources: map[string]string{
				"canary": "Canary",
				"group":  "Group",
			},
		},

		"systemsmanagersap": {
			ServiceName: "SystemsManagerSAP",
			Resources: map[string]string{
				"application": "Application",
			},
		},

		"timestream": {
			ServiceName: "Timestream",
			Resources: map[string]string{
				"database":       "Database",
				"scheduledquery": "ScheduledQuery",
				"table":          "Table",
			},
		},

		"transfer": {
			ServiceName: "Transfer",
			Resources: map[string]string{
				"agreement":   "Agreement",
				"certificate": "Certificate",
				"connector":   "Connector",
				"profile":     "Profile",
				"workflow":    "Workflow",
			},
		},

		"verifiedpermissions": {
			ServiceName: "VerifiedPermissions",
			Resources: map[string]string{
				"identitysource": "IdentitySource",
				"policy":         "Policy",
				"policystore":    "PolicyStore",
				"policytemplate": "PolicyTemplate",
			},
		},

		"voiceid": {
			ServiceName: "VoiceID",
			Resources: map[string]string{
				"domain": "Domain",
			},
		},

		"vpclattice": {
			ServiceName: "VpcLattice",
			Resources: map[string]string{
				"accesslogsubscription":            "AccessLogSubscription",
				"authpolicy":                       "AuthPolicy",
				"listener":                         "Listener",
				"resourcepolicy":                   "ResourcePolicy",
				"rule":                             "Rule",
				"service":                          "Service",
				"servicenetwork":                   "ServiceNetwork",
				"servicenetworkserviceassociation": "ServiceNetworkServiceAssociation",
				"servicenetworkvpcassociation":     "ServiceNetworkVpcAssociation",
				"targetgroup":                      "TargetGroup",
			},
		},

		"wafv2": {
			ServiceName: "WAFv2",
			Resources: map[string]string{
				"ipset":                "IPSet",
				"loggingconfiguration": "LoggingConfiguration",
				"regexpatternset":      "RegexPatternSet",
				"rulegroup":            "RuleGroup",
				"webacl":               "WebACL",
				"webaclassociation":    "WebACLAssociation",
			},
		},

		"wisdom": {
			ServiceName: "Wisdom",
			Resources: map[string]string{
				"assistant":            "Assistant",
				"assistantassociation": "AssistantAssociation",
				"knowledgebase":        "KnowledgeBase",
			},
		},

		"workspaces": {
			ServiceName: "WorkSpaces",
			Resources: map[string]string{
				"connectionalias": "ConnectionAlias",
			},
		},

		"workspacesweb": {
			ServiceName: "WorkSpacesWeb",
			Resources: map[string]string{
				"browsersettings":           "BrowserSettings",
				"identityprovider":          "IdentityProvider",
				"ipaccesssettings":          "IpAccessSettings",
				"networksettings":           "NetworkSettings",
				"portal":                    "Portal",
				"truststore":                "TrustStore",
				"useraccessloggingsettings": "UserAccessLoggingSettings",
				"usersettings":              "UserSettings",
			},
		},

		"xray": {
			ServiceName: "XRay",
			Resources: map[string]string{
				"group":          "Group",
				"resourcepolicy": "ResourcePolicy",
				"samplingrule":   "SamplingRule",
			},
		},
	},
}
